Will (00:01)
All right, what's going on? Let's do another episode of Adventures in DevOps. Warren, how's it going? It's pretty good. And I actually have a fact all prepared this week. And that is we've got an upgrade to our website, adventures in DevOps.com. So if you're listening to the podcast via a different source, you probably don't never see it. Here's your opportunity. Don't pay too much attention to it, but I think it's much better than where we That's cool. Did

you make the new website? Or is it part of the deaf chat like TV websites? I had a hand in it. You had a hand in it. Well, that's nice. Hi Jillian, welcome back. Hello! Thank you for having me back. Yeah, how's it been going? Good. It's good. It's good.

We had like the snow apocalypse here last week. But this week we're good. We're back to just snow. Yeah. Right on.

This is my first year living up north, and I've been so happy with the fact that I bought a snow blower. That's been so much fun. But, Mm-hmm.

I was thinking about

getting one for the driveway, but I haven't quite done it yet because there's guys that come to plow, so I don't know. I don't know. Yeah, highly recommended. It's just a great feeling just chugging along behind it, blasting the snow. So Matt Gowie, welcome. Happy to have you on the show. Yeah, thanks for having me. Nice to meet y'all. Be here. Yeah, so Matt, you own MasterPoint, a consulting company, right? So give us a little bit of the background on that. Mm-hmm.

Yeah, I've run MasterPoint since the end of 2016. For a long time, it was me as a solo consultant. then around very beginning of 2022, I kind of started to build a team. So we're a boutique consulting shop. We're entirely focused on infrastructure as code nowadays. What that means is particularly Terraform and Open Tofu because those are the market winners in infrastructure as code today. And then

we help our clients automate, migrate, implement best practices and really help them build the right workflows on infrastructure so that they don't have that as a bottleneck and they can help their application engineers move fast. Yeah, I mean, that's like almost a decade, right? It's close. You must have seen some wild changes that have occurred in the space over that time. Yeah. Yeah, it's been fun. I got into, you know, I always had a background in DevOps. I started in startups where you just, hey, you wear 15 different hats and you do whatever you can to help the team move forward. But I...

didn't get into infrastructure as code specifically. I was really big and answerable until like 2017 and 2018 maybe. then I, around 0.11 is when I got into Terraform specifically and I was like light bulb. Gotta get into this more. This is the way to do things. for I know that like consultant is like one of the common career paths for people in our industry. And the big challenge there is always how do you find clients, you know, and is this a consulting arrangement where I'm technically a full-time employee, but I don't get any of the benefits. So how

How does it look from your perspective? Like what do you look for in a client? How do you approach this whole problem? I think being solo is very different than running an agency. But I think one truism, one fact of life that I've found is that people do business with who they know and who they trust. So referrals are always king within consulting. You'll get a referral from a previous client or a colleague who knows you well and can speak to

hey, Matt and his team do really good work. And that client, that referral, that prospect is 90 % more likely to sign on the dotted line and trust that, hey, we're gonna do a great job for them than somebody who finds us through SEO or I've never done outbound email marketing because I don't believe in that as a viable business. Ha ha ha ha. You know, that type of stuff is not the approach that I take. I take a very like human approach to it where I go out and network a bunch. try and be a good person within my community. And that is the means by which I like really work to try and bring in business for my company. For some people, hey, if you're just getting into consulting, maybe that sounds awful to you. Maybe you just want to be heads down writing code. You can go and join a consulting shop. We're hiring every once in a while, so reach out.

You For sure, I think that's one of the big surprises for people who take on the consulting route is understanding that you...

are leaving your one job to take on three jobs because now you have job number one as a consultant where you're generating the billable hours but then job number two is you're an accountant because now you have to do all the taxes and the legal paperwork and the bookkeeping and job number three is you are in marketing because you always have to be recruiting and finding your next job once this one wraps up. Yeah, I mean, I'm with Matt that I don't believe in the cold calling. I don't think those emails work. And yet I still see, like, I probably get five to six a day from random people on LinkedIn saying, hey, you know, can we sell you our services, whatever it is. They don't even know what my company is doing. And yet they're already like, we know we can help you. Yeah.

It's just constant. I think if you have any C-suite level title in your name, I think we all get an insane amount of both spam email and the LinkedIn messages and it just piles up. It's kind of insane. And I still don't understand how people do it because

10,000 emails a year, you know, maybe that's high, but like I've never responded to one. So yeah. you're missing out on your opportunity here. I respond to every single one of them with a vengeance. I'm curious, like, I really want to know, like, is this person, you know, do they have a competency? You know, are they looking for something special? I really care about my, LinkedIn network. So I'm always looking to see, making a connection with an individual person. Is it worthwhile for them and for me? And so, like, I'll try to dive into that. And some of them, you know, actually do turn it around Yeah. but a lot of times they're just the partner portal expert or marketing manager or account manager and they have no idea of the thing that they're even selling in the first place. And I'm like, why did you think this was going to go? Just walk me through your process here. Step one, connect with me on LinkedIn. Step two, dot, dot, dot. Step three, profit. I don't know how else it is. Yeah Yeah,

that's pretty good. I'd like to invite you to have a conversation with like some teenagers. It goes exactly the same. Exactly the same. So do you find that a lot of your, you know, you talked about your network and everything's coming to you or your most likely sources through referrals, is that within your community or is that online that include digital connections? yes it does. I mean, of course, I think that, you know, we're myself and a number of members on my team are big contributors, maintainers of our own open source as well as like one of the larger open source infrastructure as code Terraform libraries. So we have a bunch of connections in that world. I have CTO, online communities I'm involved in. have

a bunch of like volunteer with other external organizations that I'm involved in. I think we try and pretty be pretty involved in like different slacks. And I think that things come from those all the time. So yeah, it's not just you have to be going out and shaking hands and kissing babies. It's also some level of online, presence is really Well, let's plug your Terraform open source library. What is that? So we are maintainers of Cloud Posse. Have you folks ever heard of them? I have! So you're that person, I steal your code like all the time. Like all the time. It's great. Yeah. I think I picked you on the show before. I didn't know this. This is like the best crossover event for a Tuesday morning ever. See, they're the best. So when I originally got into...

sure

Yeah, they're not my company. Eric's a good friend. really respect the hell out of what that guy is doing. But when I initially got into infrastructure as code, they were the community that I found personally. And I was just like, hey, these folks are doing this sensibly. infrastructure is a commodity, right? Like we're all shipping the same load balancer. We're shipping the same certificate. We're shipping the same Postgres instance. I'm not supposed to tell yeah, let me not tell anybody. Mine's a special snowflake.

I have I have no idea. no idea what you're talking about at Yeah, my load balancers

are so special. I don't know what you're talking about. Hahaha! Yeah.

Anyway, they do it right. And when I found their modules, I was really excited. I was contributing a bunch. And then as part of that, I ended up on their maintainer team. So we're helping them get PRs tested and merged and complying with all the best practices that those folks have set out. And I have multiple, my team have now joined that organization. yeah, that's the, I really believe in open source infrastructure as code. think.

There's like interesting discussions there. Some people do not. Some people think that we should be copy and pasting and writing little snowflakes all over the place. I actually want to get into that because one of my questions that I had thought up that I really wanted to ask you is what is the real impact of, and I know someone's going to be kicking me for bringing this topic up at only whatever, like the 10 minute point. And that's realistically any sort of LLM integration here. Because I really do feel like that, okay, we'll laugh it out, this is exactly the sort of thing that I think LLMs are very good at generating, but at the same time,

It's the worst place to have those little mistakes that will cost you huge production incidents. Yeah, so I will say that we don't typically generate a ton of infrastructure as code. We'll do it for new resources that we haven't seen maybe sometimes, but for the most part, I have a very serious talk with my team that like, you need to understand how all these things come together. This can't be lllm generate, git commit and ship it. Because yeah, there's a lot of nuances in. you

serious talk with my team that you need to understand how all these things come together. can't be... that one flag that might be a security loophole that might cause you to over-provision something along those lines. And I don't know, we see it a lot where people are generating a ton of code and then they don't really have a good handle on, what all of this is doing. And I think that's usually where I'm a proponent of open source because, you could probably get that same use case that you were looking for. You're trying to...

deploy a bunch of data dog monitors and instead of generating code around them and creating a, know, yeah, it'll get the job done for today, but for day two operations, is it better to have a small open source module that provides that same monitor that provides a spec, provides you something that you can upgrade in the future, provides something that's already tested and already secure? data on monitors instead of generating code around them and creating a, you know, yeah, don't get the job done for today, but for day two operations. the open source modules showing up in the LLM results or is it pure underlying HCL? Not that I've seen. And we haven't done a good test of, let's use an LLM that we've given a lot of really good instructions to read through the 300 open source modules that we typically use. But I think that that's a good question. I haven't seen anybody who's using a trained model to say, hey, these are our approved module libraries. interesting.

I

mean, I wasn't even suggesting that, but because I remember there was like a pretty huge scandal with Pulumi where they tried to do something similar to this and the LLM that they were featuring on their website just like could not provide more wrong information. So that's sort of like a data You're gonna get it wrong sometimes, right? You gotta try. It's good. Hahaha! Hahaha Sure, fell fast. So whenever you start working with a new client, do you have like a particular vertical or size of company that you work really well with and have isolated on that intentionally? Yeah, we used to love startups and it's sad that the VC market is no good. But I still love startups. We just have moved further up funnel in terms of we usually talk to the series C and above, the folks who are well established and they're trying to scale. Because that's really where a lot of our expertise comes in handy is, hey, you have...

an organization that has grown organically, you've been trying to grow fast and you've made some mistakes and we can kind of come in and dig you out of your hole. So yeah, that realm is where we really like to engage is the mid-market to like late of funding startups. We have an anchor client who's a large enterprise.

Really, I love those later stage startup clients because they have the most fun problems. They usually have great engineers that are just like, we need to be pointed in the right direction. And hey, we can do that. So it's fun. Are you seeing the same holes at each of your clients or is it like everyone have their own special set of problems? I think that there's always some combination of similar problems. There's a really common That's terror-lith problem. There's always some combination of some problems. it's basically when you build a infrastructure as code root module that's too big. So it's storing too many resources and state, and then it becomes slow to apply. It has blast radius issues and you can't really do role-based access control in your team because, you're managing your network alongside your database, alongside your application cluster. So we've seen that a ton you and that comes in all different shapes and sizes.

It's very unique to the organization. We know how to break those up really well. So that's an easy one. We'll have a post on that on the blog very soon that talks about how teams can break it up themselves. Give it away for free. You know, the other thing I think is there's still a lot of organizations who are applying locally and they haven't figured out automation. And then on the opposite side of the coin, there's a bunch of organizations who have built their own. That's an easy one. We'll have a post on that on the blog very soon.

thing I think is there's still lot of organizations that are working locally and they haven't figured out automation. And then on opposite side of the coin, there's a bunch of organizations who have built their

own automation around infrastructure scope and they found out the hard way that that's not a good route and they are really continuing to toil in details. automation around infrastructure as code and they've found out the hard way that that's not a good route and they, you know, are really, you know, continuing to toil in the details of like,

Hey, how do we, you know, make this scalable for our organization? And it's, it's kind of a bad rabbit hole. We always suggest to either go again, open source or pick one of the really awesome vendors in the space. but yeah, those are, those are some of the like high level problems. There's a lot of like nuanced. you know, make this scalable for an organization and it's kind of a bad rabbit hole. We always suggest that you either go, again, open source or pick one of the really awesome vendors in the space. But yeah, those are some of the like high level problems. There's a lot of like new Um, like code level details that I think we see a lot that we, have strong opinions on, but yeah, those are the, the 10,000 foot ones. you See, I saw Will laughing here, sort of like the villain at the end of a movie that is having some sort of psychological breakdown. And I just, have to wonder what was going through his head at that moment. Hahaha

just reliving some past trauma, think. You make the best stories? What was the drama I can totally relate to that, especially in the stage of company that you're focused on, know, the late stage series startup. Because early on, I've been guilty of this many times, know, early in the startup stage, you think about your past experiences and you're like, I'm not gonna do that again. We're going with.

I see from the very beginning and so you start building all of these processes and controls and the flaw with that is you don't actually have a product for your company yet, you know, because for every startup there's always the.

There's the product that you launched and then there's the product that your customers actually wanted and never in the history of startups have those two been the same thing. So you make all of these process and design and architectural decisions around this product that now no longer exists. And it takes someone like yourself, Matt, from an outside perspective to come in and say, you know,

You're holding on to these little nuggets here hoping that they're gold and they're not. Just let them go. Yeah. I think there's a

huge problem there though, which is that those processes are sort of coupled to the culture of your organization. So like you almost need to like actually start a new company to get rid, like actually eliminate all of that tech debt in some ways. You've built it up, you've built up expectations on how that works. Like maybe your career ladder is somehow hooked to the types of tasks and responsibilities. I mean, no one's got it that bad.

But there's a lot that needs to be thought about other than just like, you can't just click a couple of buttons and delete the code. I call it the polished turd syndrome because you start with this turd and you just keep polishing it and polishing it and then eventually it starts to get some shine to it and so now you're really emotionally invested in making this turd nice and shiny and you need someone to come in and say, ah dude, it's just a turd, let it go. Yeah. Yeah. They have to they have to want to listen though and I think that's part

of the problem is that often you see like the maybe Operations division or sales or marketing or like we're actually making a lot of money from that thing It's not like as much money as we should be making but we're making you know a million ten million a year and We just need to keep the lights on and they don't understand how much toil and complexity is actually involved to just keeping the lights on for that and so

I actually think I've seen this way more often than the other side where an engineering team doesn't want to own it. They don't want to do anything with it except someone keeps on telling them, yeah, you know, have to keep it working, but you're not allowed to spend any time doing that. at the stage of company that we usually engage with, there's always some level of like some cost fallacy, right? There's some group within the organization who's wrapped up in the idea that, hey, we've invested so much in this tooling. Why would we get rid of it? What do you mean? And yeah, it does sometimes take a third party.

like my company that comes in and says, hey, here's the reasoning, know, we're the outside eyes, we're giving you this perspective because honestly, your workflow is not great. You're not, you know, doing yourself favors here by continuing to polish this, so to speak. So yeah, I agree with what you folks are getting at. It always comes down to people problems in one way or another. And I think that luckily I've been in...

something long enough where I can navigate those well. And yeah, it's fun. Who are the decision makers that end up signing off on needing to pull in a third party for you? It usually comes down to the director level or above. So it's usually director of engineering, director of DevOps infrastructure, the VP, the CTO. It's somewhere along that chain. Sometimes it starts with an engineer where the engineer will be like, hey, we have this horrible problem. We're not dealing with it. Like we gotta do something. And that can go bottom up, but it's not typical. It's more, hey, yeah.

somebody in engineering leadership realizes they got to make a change and they're reaching out to kind of talk through, hey, what does this look like? How can we actually I think this is like a non-technical component of the job, so I'm interested in your take on it. How often is it that the problem that you're really trying to solve is the cost of scalability, where like the company's doing well and they're scaling and they're growing, but the infrastructure costs are growing quicker than the revenue. I don't think it's the actual cloud costs. That's not actually typically a problem. It's the maintenance costs for engineers and the amount of time that they're spending to feed the system that they've built in one way or another. And that's the thing that's slowing them down. Basically, they've made some bad decisions along the line that is causing their organization to overall have them.

be a bottleneck, whether that's their infrastructure workflow as a whole, maybe it's because they need to hire an entire security team to make sure that things are not going to cause a critical CVE in day five of new application launch or something. Those are the problems we more typically see. So it's less actual, hey, our cloud costs are growing astronomically and more.

hey, we're spending too much time here. Like, why is this, why is my team telling me we need three more engineers? That seems like madness when, you know, we're not really doing all that much crazy stuff here. We should be more, we should be faster. We should be more streamlined. Yeah. Maybe I actually sort of want to flip this question around because I really like it. And I think there's a different perspective here that really gets me thinking is you're not solving technical problems, are you? I get the sense that you're coming in. It's not that the organization is missing two more engineers to, oh, we only had these two people who understood Terraform better. We would solve all our they may be missing technology. But they're probably missing something

strategy for on a personal level, like their, how they're approaching problems or how they're prioritizing work or something like that. And I think it's interesting because it's multifaceted, yeah, they back themselves into a corner.

they go about things in, an infrastructure as code perspective, we're still young, right? It's still a really early days. We might be 10 years old, but HashiCorp, when they came out with Terraform, and Terraform I see as like, that's what mainstreamed infrastructure as code. They came out with that in 2014, 2015, and it was really early and it was just, it was way more config than it was code. And it's slowly grown and it's gotten better.

And the reality is they didn't put out many best practices. So you have a ton of organizations, a ton, who have just gone and built whatever the hell they wanted and it has turned into a mess. there's some fundamental problem here. And I really like the perspective of they didn't think enough about what the future was going to look like for them. And they may not have the right people on the team to, I mean, you don't fix a problem with the same initial conditions still in play. You need to change something to have a different outcome. I feel like you keep on bringing up potential perspectives that MasterPoint have that may be highly controversial.

I want to get those on the record in a way. And one of them is one Terraform repository for your whole organization, or do you merge it with the individual application code? So code and infrastructure is code next to each other in the same repo or one centralized location? That's one we don't have as much of a strong opinion on. I will say that we do have a strong opinion on there should be an infrastructure monorepo for your organization. think that that's just like there's beyond just environmental infrastructure. There's a lot of infrastructure that is global, right? If you're managing GitHub, you're doing observability as code and you're managing monitors and...

SLOs and dashboards and things like that within a tool like Datadog or Honeycomb, you want those to be in a centralized location. They shouldn't be scattered into 15 different repositories. But even when it comes down to environmental infrastructure, so, hey, we have a VPC, we've got a load balancer, we've got a Postgres database.

If a client wants to do a, hey, they want their, let's say they're shipping on Kubernetes, they want their Kubernetes infrastructure to live alongside the application that it is, you know, the repository that it's managed in, that's totally fine. But we would say, hey, put your, the environmental infrastructure that actually supports that application in the infrastructure monorepo and really have it be a single point over off in its own land so that you can like,

scalably duplicate that repo. as you add more services, as you add more components to the overall system, then it makes sense there. And then you don't need to have those application engineers doing pull requests to some infrastructure monorepo that they may or may not have any clue about what's going on. mean, it's always great when the answer is, you know, it depends, right? You know, that's, that, yeah. Hahaha! It always depends, yeah, yeah. Particularly everybody's as a consultant, favorite answer. it always depends. I said everybody's favorite answer is it depends. Mm-hmm.

Yeah. Yeah,

I mean, there are some things that, you know, I just sort of want the canonical, like it's always going to be this and, know, one of them is TF workspaces. I don't like workspaces. like directories. I want to be able to run tree on a directory, like, you know, and kick it old school here, workspaces. Nobody ever remembers to change the workspaces. Okay, I'm sorry. Now everybody else can have an opinion. Hot. You I love it, Jillian. So

that is, this is it. This is like the, you've now nailed the one, which is, this is the biggest divide within infrastructure as code, is we have people who look at infrastructure as this is config that should be copy and pasted. And we have people that look at infrastructure as this is more like code that should be, you know, there should be one instance of this thing. And then we should deploy that instance many times.

were of the camp. I disagree with Jillian, but I, you know, do respect that, there's a thousand different ways to do this and people have their own way. it's okay.

I like it when we can fight on the show. It makes it more interesting anyways. Yeah, yeah, this is good. I'm glad Right? The gloves that are coming off. you immediately came in. But yeah, we use GF workspaces. A lot of people rag on workspaces. I think that you can do them wrong. They are kind of a very light abstraction layer.

There is a really great issue in the Open Tofu GitHub organization right now, where Martin Atkins, one of the biggest original implementers and biggest contributors to Terraform Core for many years now, he has now switched over to the Open Tofu team. And one of the things that he did within his first month or so was put up an issue about deprecating workspaces.

And now that issue has, yeah, Jillian's laughing, but like. to work spaces in theory, it's just that every time I've tried to use them in practice, me or somebody else forgets they exist and like, and then that's a problem. Yeah! It could be

worse though. They could be having separate Git branches for each environment. So I've seen that. I've seen that one. You guys are nailing it. It's a feature brand to use to get one workflow. Hahaha! That's

totally reasonable. What are you talking about? No, I'm sorry. I know that's not reasonable. I just needed to say it. There's only one main line in Thank you. a Git repository and I will die on this hill. Yeah. I will die on that hill as well. Particularly in infrastructure as code, particularly in infrastructure as code, because you're not dealing with 12 factor apps in infrastructure as code, right? You don't have a separation of the config that drives that infrastructure as code like you do with a application that could be in a Git flow model. So then if you want to make a change to a production,

config setting, you have to do it in the prod branch and that might mean that you're, you just get into branch nonsense. And I just posted this recently of like, favorite, one of my favorite sayings is, you know, more branches, more problems. I think it's way worse. I think it's way worse in infrastructure as code world if you are doing a branch based workflow. Yeah. Fantastic.

I

it just doesn't make any sense from a Git standpoint because these are become separate trees. And if the zones are separate trees, why are they even in the same repository? You're not going to really do anything effective. mean, someone may say, well, you can cherry pick some diffs from one to another one. But I mean, realistically, that's. That's a nightmare. Yeah. Is that your billing model, Matt? Your hourly rate is based on the number of branches they have in their repo? I hope we don't have a client that's done a branch-based workflow, the amount of work. Yeah, maybe our hourly rate doubles. Yeah, that would be good. Maybe the, I haven't had to do it yet, but we've only heard about those clients or heard about those setups. Yeah, not yet. You So another one is you mentioned early on in the episode public versus private modules. at least from my understanding, I think this is one of those areas where if your core competency isn't building open TOEFL HCL models, you're probably going to get it wrong. And I believe it's a huge challenge to undo that mistake and using the either raw resources or what's come before you out there in the world is

way more valuable than what you'll ever be able to do. But I want to hear the expert's perspective on this. Yeah, we view it as, hey, the open source world, as long as you're correctly evaluating the open source modules that you are using, you're getting one, a community, you're getting tested code, you're getting best practices in terms of naming, tagging, and potentially security, or not potentially, but more likely security. And then you're getting something that...

when you go to, let's say add a new feature, you can always check if that module has been updated recently by somebody else who's doing that same exact feature. Maybe they're adding IPv6 support. We don't support IPv6 for all of our clients, right? I know that some of the modules that we use do, and if we had built those modules ourselves in-house for our clients,

then they would have to go in and find all the places to add IPv6 support, right? So what we typically tell clients is, if you want to encode conventions for your larger organization, and you want to make sure that, the number of variables and the best practices that you see are fit, wrap open source with your own small layer on top of that child module.

you can do a smaller child module that just consumes another child module and that bottom layer child module can be a open source and you can really, I think still get a lot of the benefits and create a lot of the flexibility that you want for your organization. So that's usually what our recommendation is. So what's your background before DevOps, Matt? Were you in infrastructure or software development? Software development, I did CS in university, luckily went to a co-op school, so I started working at startups when I was still in school. I did two stints at two awesome startups. They taught me a thousand things not to do, which was great. And one of those startups hired me before I even left. And I moved to Philadelphia and was doing full stack. Yeah. I started in mobile development, did a bunch of back end Rails work, did a bunch of front end stuff. I was really big in EmberJS back in the day. And then got into infrastructure and AWS specifically during that second startup experience. Yeah. wow.

to philosophies in doing this and I think they sort of resonate with what you were just talking about. Like you have people who have written code in the past and they understand like abstraction and wrappers and things like that. Then you have like your old school knuckle-draggers IT guys who would drag the rack in and if you needed more network ports, would drag another network switch in and you would throw it in the rack and you would crawl under the floor to wire it up and stuff.

depending on what your early part of your career looks like greatly influences how you solve IAC problems. Yeah, I strongly agree and I think it's one of the things that I get confused about. Within the infrastructure as code space, why are we all doing it so differently? And I think it's an interesting space because we do have the sysadmin folks who were just awesome at Linux and they could one line bash themselves out of any hole that they were in.

You know, we have people that are coming from application engineering that are, you know, coming from, Hey, I'm going to pick up modern practices and I learned Python, but now I'm switching over into, into writing code or writing infrastructure. Cause that's what the organization needed today. And I think that it's this weird, it's not a traditional software path. So, you know, you have all these different ways of thinking about it, but when it comes down to it, a lot of the time I, I.

ask the question, why do we not treat infrastructure as code as code? Like that is like a core principle, a core like issue that I have with a lot of people's And yeah. Yeah. Hahaha!

Well, it seems obvious when you phrase it that way. Cool. Well,

I think there was a fight in one of the online communities I'm in, whether or not the configuration that lives in a YAML file counts as programming. Like if you go and change that. you know, for me, it's just a DSL and every DSL is programming language. So whether or not it's Turing complete is sort of irrelevant. And I'm sure someone's going to be like, YAML is Turing complete. I don't know if that it is, but I'm sure someone will make that comment. In which case, yeah, for sure. Yeah. But I mean, you're changing something, what you're impacting here. And I do think that there is this fundamental disagreement on how people really think about the world and their internal values and their own perspectives influence how they think about the infrastructure that they write or what they create. the psychology of DevOps. Yeah. It's all people problems.

Like Matt's right, we have a lot more people problems than we do technical problems. Yeah, it's never a technical problem. I mean it is, it is, but the- Right. you guys can go work

with the techie people, I would just- I would get so annoyed so fast because the people that I work with, don't really care about the nitty gritty of what I'm doing, they prefer not to know, they would prefer if they never had to deal with me at all as what they really want. But if they can't do that, they want me in and out as quickly as possible and have no idea what I'm doing and that's their wish list. So I can't imagine working with people who, I don't know, I think I had one client nitpick at me about Ha ha ha! like a load balance, the type of load balancer that I was using and I was just like, aw I'm not doing this again. Yeah, I hear you. Yeah, I think particularly at the larger organization level, lot of people want, you know, infrastructure and DevOps is not a driver for success, right? It's a requirement. It needs to be part of the like pyramid that builds up to, you know, profit at the end of the day. But people want it to be a really small piece and they want it to be quiet and they

you know, want to build that upper application piece that actually drives dollars. And it's a frustrating place to be in. In terms of psychology at DevOps, like as you just mentioned, well, like that is, when I talk to a lot of DevOps engineers, platform engineers, whatever you want to call them, it's like, you know, they're always just struggling with, they have a ton of work, they have a huge backlog, they don't have budget, like they don't have a big enough team.

And I think that's really consistent. I think part of it comes from the fact, someone was saying this recently to me that they think the next innovation in DevOps will be where the DevOps teams and the platform engineering teams and the product engineering teams will come and work together. And I'm like, I think you misunderstood what DevOps means if you think that that's a future we haven't reached yet.

But I think organizations definitely swapped out whatever they were calling release engineering or infrastructure management. They just gave it a new name. And so of course we're going to see those problems in organizations where they are stuck there, where they don't see a solution, where they don't see anything as different, and they need someone to come in and help. Hehehe

100%. I got another controversial one. Here we go. Crossplane. Ooh, we've got a great blog post on it. I share it out all the time because it's, I don't know, it just feels, it's a shame. So back when I kind of started to build my team and started to transition from solo to agency, I had been really stoked on Kubernetes for a long time. And you know, really,

Thought it was the Swiss Army knife to solve all the problems. I think about that less now, but... I was thinking crossplane was the next thing. I was like really excited. I had my senior engineer, Veronica, on my team. We did, her and I like collaborated on a long... No. Episode over, sorry. Thanks for term proof of concept to build a bunch of infrastructure in Crossplane. And I was just bullheaded. I was really, really excited. And then just as we got through this proof of concept, thing after thing were just too painful. It's just not, there was things that were missing that I was like, wait, we can't do that? There aren't data sources? And they have some of those things now.

But I still think that overall there's a huge chicken and egg problem. Like where do you get that Kubernetes cluster? So you have to kind of solve that differently all the time and there is a bunch of problems around ergonomics of that tool and I just talked to somebody, somebody who worked at Farrowinds. They had gone all in on crossplane and then they ended up pulling it out and going back to Terraform. And our blog post kind of shares all our thoughts on that but

Yeah, crossplane is, it was exciting as an idea. I don't think it delivered on the promise, sadly. Yeah,

I mean, I'm really with you here. I don't know what the best way of summing it up is. Imagine if Kubernetes deployed all of your infrastructure. And I don't love that because I just don't like these two things coupled together. And I feel like it's taking one very complex thing and throwing yet like a second aspect to it where people are already overusing Kubernetes in a lot of places where it may or may not need to actually be utilized and then to...

throw this on top. I'm really glad there is an article out there that discusses these because I definitely would have wanted to throw it at some of my past clients and customers who were... You know, I think there's one of these problems though where if you find yourself in an organization that has those problematic patterns in place, how do you fix that? I'll share it. Yeah. come in an organization and they are using crossplane and you're like, okay, you know, they're probably, I've been called in because they know that there are issues and you can look at it be like, okay, I bet one of the issues is how is the fact you're using crossplane. You didn't think about what the implication of that was going to be. You're pretty much stuck on Kubernetes, you know, full on there. And it's the same teams and organizations that don't have Kubernetes experience, but they'll somehow have crossplane experience.

and they also don't have infrastructure experience outside of Kubernetes or outside of crossplane. I fear those organizations. Yeah, and I think there isn't a great answer there, right? It's like, hey, either you continue down that path and you upscale, you try and make it as little as painful as possible. I think one of the things is like probably there's a new pricing model with that Upbound has introduced where Crossplane is now, if you want access to their providers, like the...

then you need to pay at least $1,000 a month. I think that's like newer versions of their providers, like maybe three or six months or something like that, which was kind of mind boggling to me. So I think you need to accept that, if you've made that poor technology decision, you either need to learn, you need to migrate away from it or you need to go further into it. You need to lean into it, which would,

I think that it's still probably going to be painful, but I think you could probably continue to polish to bring it back to our earlier conversation. Hahaha! I

like that perspective. I think that's a good one. It's that you're in a problematic spot. There is no world where you don't spend more resources. It doesn't just magically get better. And you can either go deeper on it, level up your team's experience, utilize the technology the way it's supposed to, or pick a better answer. And I think a lot of people don't want to hear that answer. Thank Yeah, we had a client, they had built their huge wrapper, a TypeScript wrapper. were a TypeScript shop, they had a huge Monorepo. It was kind of a thing of beauty. I think they were in the 100,000 plus pull requests count. But the thing they had done was they built a big TypeScript wrapper around Terraform. And it got...

complex. They were doing a ton of code generation. They were doing a ton of stuff that I was like, guys, come on. And they knew it too. They knew it was painful to them. They were like, hey, what do we do with this? Do we keep going? And our advice, you know, after we did an audit for them and then kind of just did some guidance sessions for a few months later. And our advice was like, no, you need to pull everything out. Like we need to get away from this because you're just going to keep building complexity.

I don't know. That made me think about that story. Yeah, like I've done a lot of

silly things, but like, I don't know. The thing that I like about Terraform is that it's just a fancy make file, so I can't imagine throwing anything else on top of that besides making it like a git template. Like I do that a lot, where it's like my template repo, or I'll use like cookie cutter or something to generate the tfvars file, but that's... I sort of get it. And I think where it came from for me is that originally things like Terragrunt needed to exist because of lack of workspace support or lack of environmental variable support or lack of good loop support within. And I hesitate to call it Terraform because now we have Open Tofu and now I need something that groups all the HCL language support together. So I don't have to pick one word over the other one. I mean, I just want to say Open Tofu. Terraform is done for me. Thank

Yeah,

agreed. So, and maybe I to get your opinion on that too, because I think that's a good perspective there. I sort of get it. And actually with Terraform, with TF, now you have the CDK as well, which is at least blessed version. But at least for me, I prefer the thing that's more declarative. Like, I feel like that's sort of the point is declarative infrastructure rather than programmatic infrastructure creation. Because we had that with things like Puppet and Chef and it did not, it did not go over. Yeah. but so I'll ask you Matt, you know, open tofu or tower form. if you see any of my content, if you see our blog posts, we're big Open Tofu folks. I have talked at Open Tofu North America. We've migrated five clients to Open Tofu, six. And we're, I honestly believe in the whole thing. Not only just from the open source perspective and the fact that HashiCorp did a rug pull, but because they're, That's good to hear. they're innovating maybe a bit better, right? Like they have new features that I'm like pretty excited about. And I like that they have a Slack community and people are really active in it. I like that they are supporting their community and being really on top of it. There's a lot of really good engineers on that team. I've gotten to, you know, go out and have a beer with Christian, who's the team lead. And I really liked the guy.

so I think that outside of even the license change, I would say I'd be going towards open tofu. But if you're on Terraform today, the biggest thing I always say this, it comes down to optionality. when you want to go and automate your Terraform, you either have on Terraform, you have the option of open source tools like Atlantis. You have the option of writing your own pipes, which highly don't recommend.

recommend against. And then finally you have Terraform Cloud. Terraform Cloud, not a bad product. It does what it needs to do, but it is five to 10 times more expensive than its competitors. And that is the big rub, right? You have a product in the space and it's the only product you can choose and pay for and say, hey, we have a vendor that helps us manage the complexity of all of our infrastructure, but it's five to 10 times more expensive than everybody else. Like that's, it's a really hard pill to swallow.

So I think that Open Tofu gives you a way out of that. And that's one of the main reasons that we tell people to go that route. See, I have my fingers crossed that we'll finally get a switch for every single resource that allows us to turn it on or off without abusing the count variable. Interesting. Why, why do you dislike count? Do you just want like an enabled flag? Well,

yeah, I do just want an enabled flag. The number one reason I dislike it is besides all the linting problems is it converts your resources from a singleton into an array with a single object. then if you want to turn it off, you can't remove the count once it's true. You can't pull that out and just have everything work. I get what you're saying. So there is now the moved block, which allows you to change the path of something within the state file, which can save you there. It can make it so that, you can add count to a resource, even if it didn't have it before, and not have it destroy and then recreate that resource. Still a pain. I get what you're saying. Maybe there should be some smarts that gets built into that. But that's a good one. You really want,

yeah, I mean, you really want your tools to enable a pit of success. And I feel like this is one of the things that is for sure a pit of failure and tricks people up. And yeah, there's ways around it for sure. But the last thing I want to do is like, oh yeah, let me put an extra ticket on our board for every single infrastructure change just so someone can go back and write a move block and then delete the move block when they don't need it anymore. No one's going to do that work. I hear And I wonder if they could build that. I don't know. I'm going to look up if there's an issue in the Open Tofu repository for this. yeah.

I will put

my thumbs up on it. I'm not gonna do that software development myself, but I'm happy to use my very expensive thumbs up button to vote on that. Yeah, I know. So expensive. Yeah. And I

think one of the great things about Open Tofu is that they are being very community driven in terms of what they work on. So those thumbs up matter a lot where they have a board, an issue that's like the top of their issue list that just lists all the issues that have gotten a certain number of thumbs up. And they're saying, Hey, we're going to work on the top one. And that is, that's really cool because, Hey, we have a say. I think a lot of the...

A lot of the problems with Terraform too were around we as a community were, you know, banging the gavel like, hey, we need this thing, we need this thing, we need this thing and just weren't getting anywhere with it. And Open Tofu has just kind of flipped that. yeah, anyway. key driver behind that is HashiCorp had to satisfy the board, you know, whereas Open Tofu has to satisfy the end users. Yeah, it's a shame that Hashecorp went public. I think they had great leadership and they did what companies do, which is you get to a certain point and everybody wants to make money off of your hard work. And I don't blame them for that. I really don't. But I think being a public company is brutal and, you know, it's just rough. It's a shame. That is, having spent my career in startups, I can't imagine in 2025 why anyone would take their company public. If you really believe in the mission of your company and the end users who are supporting your product, if that's your focus, there's, I don't see a valid argument to take the company public. I have to imagine that it's not usually from like totally private to IPO. Like it's usually through the VC chain, which is all about extracting the most money out of that thing and scamming the most number of people in that pyramid scheme until you can get it out to the public. And then from there, shareholders are very myopic. Right.

Yeah.

Absolutely. focused on just the next quarter and don't realize that having huge impacts on how the business actually works and the perception of the brand has a long lasting impact to the bottom line. I do have a question of my own, maybe just something that you've thought about a little bit. One of the problems that we have in our space, so for our product, it's login and access control that we provide for our customers and there's a white labeling experience. Yeah. There's a whole part of the infrastructure which is shared, but then there's a bunch of pieces which are per customer, per account for each one of our customers. And sometimes they have more than one. And we're in this weird area where we don't know whether or not infrastructure as code makes sense for that and whether or not we should be rolling out either, I mean, for this, we're actually using cloud formation templates in AWS, but we could just easily switch over to Open Tofu. Whether or not that even makes sense or whether or not... Thank running through this list of resources that a new account needs is a programmatic process or whether or not it should be declarative and infrastructure. I know we're not the only company with this problem. We're not a special snowflake here. So I don't know if this is something you've seen before and have some wisdom to share. Yeah, I have some wisdom. You know, we have a, our most recent case study was with a company called Power Digital. For each of their customers, they're basically spinning up a small data warehouse in Snowflake that connected to AWS and a new GitHub repository and like did a bunch of things. And they had 500 customers, right? So they were doing this constantly. What happened? spinning up a small data warehouse in Snowflake. And really what it comes down to is you do probably want that in infrastructure as code because you want to manage the life cycle of that, right? You might change that architecture for that client infrastructure that you're like just stamping out every time you get a new one. You might change a little thing, right? You might do something to it, you know, new tomorrow and you want to roll that out across everyone. Infrastructure as code is great for that. You also might... So if you know, if there's any costs associated with those resources, you might want to destroy that infrastructure there's any costs associated with those resources, you might want to destroy that infrastructure. when that client goes away or customer goes away. I think that infrastructure as code makes sense. The point problem is that you just want that to be a highly automated, low touch workflow. And that is the point that becomes a rub is that you need to kind of come at it from this perspective of, all right, we need to be, we need to have our infrastructure as code to be on such rails that it needs to get into Git.

and it needs to apply automatically and it needs to do all of that very seamlessly so that we're not needing to think about it too much, we built that for our other clients. So if you want to talk one-on-one afterwards, I'm more than happy to give you all the info on how that worked. yeah, think that infrastructure should be a thing that we create provision, we can change if we need to, and we can destroy it if we need to.

If we just do that with calling the AWS SDK or we do something that's the AWS CLI bash script or whatever it is, those types of things, they feel very programmatic and they feel like a really good solution at the time, but then you don't have as much control in the long term. So yeah, that's my thought. I want to switch topics just a little bit or not topics, but switch trajectory. Maybe it's a better word for someone who's listening to the podcast, considering the consultant versus career DevOps approach. What's your bullet list of pros and cons of each? The pros list is high, is long, in terms of just like, you know, being a consultant, particularly owning my own business is very, very advantageous to the rest of my life in terms of I set my own schedule, I decide who I work with, you know, I get to build a team, which is really nice. And it's, you know, they're my people and, you know, I enjoy.

helping them grow as engineers and in their career. There's a lot of things on the pros list. What's more interesting probably is the cons list. The cons I think come from, there's always gonna be some level of feast or famine. I've been doing this for a long time and I still find myself in, are we gonna get a new client next quarter? And usually it all works out, There's some... Ha ha ha ha. you know, serendipitous occasion. I've never, you know, had to let anybody go because we didn't have enough work. I've never had to, you know, be out of work for many months at a time. You know, I've had it well, but like, hey, if you're just starting and you don't have a network, you might go for a certain six months without, you know, picking up a client and actually having work. So I think that understanding that you're on your own.

And your livelihood can depend on that, is its own source of stress. And I think that there's something there. I think you also really need to be able to talk to people problems. A lot of the times I'm talking to clients and letting them know that I'm there as an individual to help them. And I can see that they're stressed. I can see that we are trying to solve some deeper emotional need.

And you need to have those like soft skills at a deep level to help them navigate the right decision and get that stress off their plate. And I think those are two things that a lot of people that are like really excited about consulting, they don't think about those two things. I definitely wouldn't consider myself a, you know, soft skills at a deep level to help them navigate the right decision and get that stress off. wizard coder. think I can write code and that's like part of a craft that I really love. But I definitely have worked with a lot of smarter people in my career and they're off being, you know, senior engineers or above elsewhere at companies that just tell them, hey, we need to build this thing. They're not trying to solve those people problems. They're not trying to navigate those.

the intricacies of, this client, you know, consultant relationship. So, yeah, and I think it highlights one of the things that There's almost like a translator skill required to be a successful kind of consultant because Your clients typically don't come to you describing a technical problem they come to you describing some impact that's happening to their business and you have to

be able to translate that, talk with them, ask follow-up questions, and then translate that into a technical problem that you can solve. For sure. Yeah, a lot of it is like, can I repeat that back to you? Like this is what I'm hearing, right? And a lot of things come back to that. You have to be able to read between those lines and kind of understand at a root level, like what's the actual issue here? They're telling you one thing, but it's something else. And that's a skill, yeah. Yeah.

Yeah, can I repeat that back to you? It's probably got to be one of the most valuable phrases in humanity. Alright. Yeah, let's make sure we're on the same page here. That's the way it goes. Yeah. I think there's maybe an additional connection here, which you brought up earlier on who your decision makers are. If you're a consultant, you're selling your services to someone. They have to have money. Like an engineer probably isn't going to make the decision on paying you to come in and help, which means you're talking to the, like you said, directors of technology and hire and what problems do they think they have? Right. And they're not like, well, you we have some terraform modules that don't work right. You know, it's probably not what they're coming and saying. No,

never. Yeah. And the way we approach that is that, hey, we want to come in and we want to solve both problems, right? We want to solve the leadership's problems that are typically around scale, workflow, decreasing, know, engineering costs or maintainability costs. We also want to solve the ergonomic problems that the, you know, actual people who are writing the infrastructure as code or the application engineers are dealing with. So what we do is we'll typically, we have an audit. Hahaha. And more and more, we're selling that audit as our way to really help understand an organization and get them the right prescriptive guidance that they need. as part of that, interview engineering leadership. We also interview a bunch of the infrastructure engineers and application engineers. We make sure that we're kind of holistic in approaching the problem, not just from what we're being told, but making sure we're uncovering.

what else is there because we don't want to leave any unturned. It's important. sure.

Right on. Just feel like a good time to move on to picks? Alright, cool. Jillian, you've been out for a couple weeks, so I can only assume that you have been diligently researching your next pick. So I'm excited to hear what you got this time. Yeah, I think so. Let's do it. I'm just going to keep going with the shameless self-promotion until I get more clients, is what I'm going to be doing, since that's a bit on topic of the show. If you've been listening to the show lately, you know I really like AI and LLMs and all of those kind tools. I do have a service to get all of that set up for you on your own AWS account. This is mostly geared towards data science companies, because if you're not a data science company, I don't really know what to do with you, frankly. Hahaha

Ha! But You if you

need kind of a junior, maybe grad student level research assistant to go querying your papers, querying structured and unstructured data sets, we've got more data sets being added every day. So far the top one is open targets for drug discovery. But I've had a whole bunch of single cell spatial transcriptomics. there's just people are starting to do some pretty cool and wild things with it, which is exciting.

So if you're interested in that, can go to my website. It's dabbleofdevops.com slash AI, and you'll see that there's an LLM data discovery tool. This week the page is in fact up. Last time it may or may not have been. I'm not sure, but this week it's up. Okay, it's there. It exists. Ha ha.

All right, Warren, what'd you bring for a pick this week? Yeah, so I'm going to be a shill for our conference. I absolutely love DevOps Days. I think it's one of the best set of conferences anywhere in the world. They're volunteer run and my CEO will be giving the talk at DevOps Days Zurich this week. It's all about systems thinking at Authress and it's actually a great talk. Yeah, for sure.

Right on, nice. Yeah, I agree with you on DevOps Days. DevOps Days Amsterdam is probably one of the best I've been to, because those guys, they just go out of their way so that when you leave, all of your swag reminds you that you were in Amsterdam. It's very, very like cultural and historic and authentic and super cool and thoughtful.

All right, Matt, would you bring for a pic? I have a book, had a hard time picking, but I am obsessed with this series called Dungeon Crawler Carl. It is a fantasy sci-fi series. They're on book seven now. And you might scoff at the name and you might think that that's not for you. And I will tell you that I'm nine for 10.

on friends that I've recommended it to and had them go, wow, I now have a new favorite It's really consistent. Yeah, yeah, I cut that guy out of my life. Fantastic, really witty, really funny. There's a talking cat. You will enjoy it if you read it. One of them's not a friend anymore. You Can't

win them all. Just the name Dungeon Crawler Carl sounds, it sounds like the hero from an 80s video game. That's such a cool name.

Right on. It makes me think of this like the hardest video game I've ever played and that's not Dark Souls or Ninja Gaiden. It's something called Lester the Unlikely for Super Nintendo. It's almost like an 80s game. You are literally playing just a regular human who has to navigate quite challenging set of circumstances. Like imagine you're in a fantasy world and you don't have any superpowers and you can't jump high and if you fall off a rock you will die. That is this game. Hahaha! and you get abducted by cannibals and have to like steal keys and unwittle ropes in order to get out and it's quite the challenge because there's no help at all while you're playing so you will die over and over again. Damn.

Those games were just brutal. Nice, Right?

Well, so my pick's gonna be kind of a letdown after that conversation, because I'm picking seat covers. I've, yeah. So I just got a new set of seat covers from a company called Shear Comfort, S-H-E-A-R, so like shearing a sheet, but Shear Comfort. And they've got so many different choices for seat covers and the seats in my truck. I like seat covers. I like seat covers, yeah. They were getting like mud and dirt and stuff on them and I thought I just can't do this to the seat. So bought these seat covers. They're super cool. Really, really well made. Pretty easy to put on. Look great once they're on. And then it's got all like the nice features like they're specific to my model of trucks. So like I've got a Ford truck. So it's got these little loop handles that you have to pull to get the seats to fold down. So it's got the

cutouts for that so that that works natively and it's got, you know, it's built so that the side restraint airbags still work, which may be cool at some point in my life, but a lot of little features like that and just really well built. yeah, sure comfort seat covers if you're looking for a set of seat covers. And then they sent, with the box, they sent like a product catalog, which kind of shocked me and it's a huge product catalog. That's good to know. Bye. So they also make in addition to seat covers they make like full I don't even know what you call them if you wanted a blanket for your car or truck they have like shaped covers for those Or if you have to put a cover on your RV they make a full Custom fit cover to fit your RV just a lot of things that I didn't even know existed that I found out because they included the catalog Damn. I think,

I think Will, your pick next week is like you're already thinking about the McMaster car product catalog. Yeah,

for sure. This is the McMaster car catalog of seat covers and car wraps.

I think we've ourselves an episode. Matt, thanks for joining us man, it's been great talking to you. You Yeah, it was a really good conversation, folks. Appreciate it. Some good questions. Good topics. Yeah for sure.

Yeah so be sure and check out Matt's website masterpoint.io is that right? Yeah so if you need consulting services or if you are wanting to try your career out check it out and see if he's hiring. Warren, Jillian, thank you both for being on the show with me today. Yes it is. Perfect. Thank you. It was fun. and for everyone listening.

Thanks for listening and I'll see everyone next week. Cool. Good chat, folks.

